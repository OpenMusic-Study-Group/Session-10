; OM File Header - Saved 2021/07/05 14:51:17
; (6.2 :patc (om-make-point 181 221) (om-make-point 321 19) (om-make-point 980 856) "" 183 0 nil "2021/07/05 14:51:17")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "import-svg" (quote ((let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 82 339) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 248 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-" (quote om-) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 52 237) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 204 196) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0) (3 0 2 1 nil 0) (1 0 3 0 nil 0))) 6.2 nil "" (om-make-point 0 0) (om-make-point 617 455)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 206 991/2) nil (list (list 100 300 500 600 700 800 800 900 900 1000 1000 1100 1100 1200 1200 1200 1300 1400 1600 1700 1700 1900 2000 2000 2100 2300 2800 2800 3700 3700 3800 3900 3900 3900 4000 4100 4200 4500 4500 4600 4700 5000 5200 5400 5400 5400 5500 5600 5600 5700 5700 5700 5700 5900 6000 6000 6600 6700 6800 6800 6900 7000 7100 7100 7300 7400 7500 7600 7700 7800 8000 8000 8100 8200 8300 8500 9200 9300 9400 9400 9500 9500 9600 9600 9600 10500 10800 10900 11000 11100 11500 11800 12000 12100 12100 12300 12400 12400 12400 12400 12500 12600 12700 12900 12900 13000 13000 13100 13100 13200 13300 13300 13300 13300 13400 13400 13400 13400 13400 13500 13500 13500 13500 13500 13500 13500 13500 13500 12100 12200 12500 12700 13300 100 300 400 600 1100 1200 1400 1400 1500 1600 2000 2300 2500 2600 2600 2700 2800 2900 3000 3100 3200 3200 3300 3300 3400 3400 3500 3600 3600 3700 3900 3900 4000 4000 4100 4300 4300 4800 4800 4800 4900 4900 5000 5000 5100 5300 5600 5700 5800 5900 6000 6000 6400 6600 6600 6600 6700 6800 7200 7400 7600 7700 7700 7800 7800 7900 8000 8000 8000 8100 8200 8200 8500 8500 8500 8600 8600 8700 8700 8800 9200 9200 9200 9300 9500 9600 9700 10500 10500 10500 10600 10500 10800 10900 11000 11100 11100 11200 11200 11300 11300 11500 11700 11800 11800 12000 12100 12100 12200 12400 12400 12500 13100 1500 13100 13100 13300 13500 13700 13900 14100 14200 14300 1600 1800 1800 1900 2100 2300 2600 3700 4000 4500 5100 5700 6300 6700 7200 7400 7500 7600 7700 7900 8000 8300 8400 8700 8900 9100 9100 9300 9300 9400 9500 9600 9600 9700 9700 9900 9700 9900 9900 10400 14400 0 100 100 200 200 300 600 1400 4800 5900 6300 6500 6700 8100 9300 9700 10800 11300 11600 11800 12000 12400 12500 12700 8700 10000 10700 11900 12500 12600 12600 12700 1600 1700 1900 2300 2700 3000 3400 4500 5000 5300 6200 6700 6800 7100 7200 7200 7200 3400 3700 3900 4100 4400 4700 4900 5200 5500 5900 6300 6700 7200 7600 8400 9200 9400 9500 9600 9800 10000 10400 11100 11500 11800 5400 5700 5800 5900 6000 6100 6300 6300 6400 6600 4100 4200 4500 2700 4100 1500 1500 1500 1500 1500 1600 8300 8900 9300 9700 9800 10100 10500 10900 11000 11300 11400 11500 11600 12500 12800 9900 12800 7400 11500 4600 7000)) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "BPC-LIB 2" (quote bpc-lib) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of BPC objects" "bpf-list" (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote nil) (quote nil) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj))))) (om-make-point 67 109) (om-make-point 133 142) (if (find-class (quote bpc-lib) nil) (make-instance (quote bpc-lib) :bpf-list (list (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (46 48 50 51 52 53 53 54 54 55 55 56 56 57 57 57 58 59 61 62 62 64 65 65 66 68 73)) (quote (211 214 215 216 218 218 219 219 219 220 220 220 220 220 221 221 221 221 221 221 221 221 222 222 222 222 222)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (73 82 82 83 84 84 84 85 86 87 90 90 91 92 95 97 99 99 99 100 101 101 102 102 102 102 104 105)) (quote (222 222 222 221 221 221 221 221 221 220 220 220 220 220 219 219 219 219 218 218 217 216 215 215 214 214 214 213)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (105 111 112 113 113 114 115 116 116 118 119 120 121 122 123 125 125 126 127 128 130)) (quote (213 211 210 209 208 208 206 206 206 205 205 204 204 204 202 200 199 198 198 198 197)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (137 138 139 139 140 140 141 141 141)) (quote (182 180 179 178 178 178 178 178 178)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (150 153 154 155 156 160 163 165 166 166 168 169 169 169 169 170 171 172 174 174 175 175 176 176 177 178 178 179 179 179 179 180 180 180 180 180 180 180 180 180 179 178 178)) (quote (178 178 177 177 177 177 177 177 178 178 180 180 180 181 181 183 183 184 185 185 185 185 185 186 186 186 186 187 187 187 190 191 191 192 193 194 195 197 198 198 198 198 198)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (178 172 170 167 166)) (quote (198 199 198 196 195)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (46 48 49 51 56 57 59 59 60 61 65 68 70 71 71 72 73 74 75 76 77 77 78 78 79 79 80 81 81 82 84 84 85 85 86 88)) (quote (211 211 211 211 211 211 211 211 211 211 211 211 211 211 211 212 213 214 215 215 215 215 216 217 217 217 217 217 217 217 216 215 215 214 213 211)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (88 93 93 93 94 94 95 95 96 98 101 102 103 104 105 105)) (quote (211 208 208 207 207 206 206 206 206 205 204 204 203 202 201 200)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (109 111 111 111 112 113 117 119 121 122 122 123 123 124 125 125 125 126 127 127 130 130 130 131 131 132 132 133 137)) (quote (193 191 191 190 189 189 187 186 184 184 184 184 183 183 181 181 181 181 181 181 184 184 186 186 187 187 188 188 182)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (137 138 140 141 142 137)) (quote (182 187 186 186 186 182)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (150 150 151 150)) (quote (178 184 184 178)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (150 153 154 155 156 156 157 157 158 158 160 162 163 163 165 166 166 167 169 169 170 176)) (quote (178 184 184 185 185 185 185 186 186 186 186 186 186 186 186 186 187 187 187 187 187 186)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (176 176 178 180 182 184 186 187 188 60)) (quote (186 186 185 185 184 183 183 183 183 181)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (61 63 63 64 66 68 71 82 85 90 96 102 108 112 117 119 120 121 122 124 125 128 129 132 134 136 136 138 138 139 140 141 141 142 142 144)) (quote (197 196 196 196 195 195 195 195 195 195 195 195 195 195 194 194 195 195 195 196 197 198 198 200 201 202 202 203 203 203 205 205 205 205 206 206)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (144 142 144)) (quote (206 211 206)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (149 189)) (quote (219 214)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (112 110 108 104 93 59 51 48 47 47 46 46 45)) (quote (237 237 237 237 237 237 237 237 237 237 237 237 237)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (126 138 142 153 158 161 163 165 169 170 172)) (quote (233 233 232 232 232 232 232 232 231 231 231)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (132 145 152 164 170 171 171 172)) (quote (222 222 222 221 221 221 221 221)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (61 62 64 68 72 75 79 90 95 98 107 113 116 117 117 117 112)) (quote (246 244 243 242 242 242 241 240 239 239 239 239 239 239 239 239 237)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (79 82 84 86 89 92 94 97 100 104 108 112 117 121 129 137 139 140 141 143 145 149 156 160 163)) (quote (168 167 167 166 165 165 164 164 164 164 163 163 163 163 162 161 161 161 160 160 160 160 160 160 158)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (111 109 108 108 106 105 104 103 102 99)) (quote (173 173 172 172 172 172 172 172 172 172)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (90 87 86)) (quote (173 173 173)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (86 72)) (quote (173 175)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (60 61 60 60 60 60)) (quote (181 178 178 178 178 181)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (128 134 138 142 143 146)) (quote (170 170 171 171 171 172)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (150 154 155 158 159 160 161)) (quote (178 171 171 171 171 171 172)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (170 173)) (quote (171 170)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (173 144)) (quote (170 206)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (160 119)) (quote (201 214)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj) (let ((newobj (when (find-class (quote bpc) nil) (let ((newbpf (simple-bpf-from-list (quote (115 91)) (quote (226 146)) (quote bpc) 0))) (setf (bpfcolor newbpf) (om-make-color 0 0 0)) (set-name newbpf nil) newbpf)))) (when newobj) newobj)) :from-file t)) "x" nil (pairlis (quote (picture winpos winsize)) (list nil (om-make-point 0 0) (om-make-point 778 687))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "OMLOOP" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil) (om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil))) (om-make-point 283 72) (om-make-point 156 59) nil nil (list (let ((box (om-load-boxin "input 3" 3 (om-make-point 301 530) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 2 (om-make-point 253 538) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 1 (om-make-point 211 361) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 257 222) (om-make-point 38 30) (quote first) "first" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT." (quote sort.) (quote ((om-load-inputfun (quote input-funbox) "the list" "LST" nil) (om-load-inputfun (quote input-funbox) "test" "TEST" (quote <)) (om-load-inputfun (quote input-funbox) "key" "KEY" nil))) (om-make-point 237 252) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 191 421) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "mypatch" (om-load-patch-abs1 "mypatch" (quote ((let ((box (om-load-boxin "input 5" 4 (om-make-point 267 37) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 4" 3 (om-make-point 218 35) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 160 31) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 110 35) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 160 213) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 62 35) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-SCALE" (quote om-scale) (quote ((om-load-inputfun (quote input-funbox) "number or list" "SELF" 1) (om-load-inputfun (quote input-funbox) "a number" "MINOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXOUT" 0) (om-load-inputfun (quote input-funbox) "a number" "MININ" 0) (om-load-inputfun (quote input-funbox) "a number" "MAXIN" 0))) (om-make-point 110 135) (om-make-point 138 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 4 0 nil 0) (5 0 6 0 nil 0) (3 0 6 1 nil 0) (2 0 6 2 nil 0) (1 0 6 3 nil 0) (0 0 6 4 nil 0))) 6.2 nil "" (om-make-point 0 0) (om-make-point 500 380)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil) (om-load-inputfun (quote input-funbox) "" "input 5" nil))) (om-make-point 252 619) (om-make-point 137 67) nil "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 318 718) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 333 300) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect 2" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 327 366) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MIN" (quote list-min) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 398 554) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-MAX" (quote list-max) (quote ((om-load-inputfun (quote input-funbox) "a list" "SELF" (list 0 1 2)))) (om-make-point 450 552) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT 3" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 434 494) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 132 372) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 119 297) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BPF-LIST" (quote bpf-list) (quote ((om-load-inputfun (quote input-funbox) "3DC-LIB" "3DC-LIB" nil))) (om-make-point 133 99) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 127 439) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 131 149) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "POINT-PAIRS" (quote point-pairs) (quote ((om-load-inputfun (quote input-funbox) "a BPF or BPC" "SELF" nil))) (om-make-point 119 222) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 136 25) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil) (om-load-inputfun (quote input-funbox) "other values" "MORE" nil))) (om-make-point 224 777) (om-make-point 117 59) nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil) (om-load-inputfun (quote input-funbox) "other oprations" "MORE" nil))) (om-make-point 109 632) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((18 0 4 0 nil 0) (3 0 4 2 nil 0) (13 0 5 0 nil 0) (2 0 5 1 nil 0) (1 0 6 1 nil 0) (0 0 6 2 nil 0) (10 0 6 3 nil 0) (11 0 6 4 nil 0) (6 0 7 0 nil 0) (9 1 7 1 nil 0) (14 0 8 0 nil 0) (8 0 9 0 nil 0) (12 0 10 0 nil 0) (12 0 11 0 nil 0) (9 1 12 0 nil 0) (14 0 13 0 nil 0) (4 0 14 0 nil 0) (19 0 15 0 nil 0) (5 0 16 0 nil 0) (15 0 17 0 nil 0) (17 0 18 0 nil 0) (16 1 20 0 nil 0) (7 0 20 1 nil 0) (16 0 21 0 nil 0) (9 0 21 1 nil 0))) 2 "omloop" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 96 635) (om-make-point 780 178) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7380) (7536) (7588) (7640) (7744) (7744) (7796) (7796) (7796) (7848) (7848) (7848) (7848) (7848) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7900) (7952) (7952) (7952) (7952) (7952) (7952) (7952) (7952) (7900) (7900) (7900) (7900) (7900) (7900) (7848) (7848) (7848) (7848) (7848) (7796) (7796) (7796) (7796) (7744) (7744) (7692) (7640) (7588) (7588) (7536) (7536) (7536) (7484) (7484) (7380) (7328) (7276) (7224) (7224) (7120) (7120) (7120) (7068) (7068) (7016) (7016) (7016) (6912) (6808) (6756) (6704) (6704) (6704) (6652) (5872) (5768) (5716) (5664) (5664) (5664) (5664) (5664) (5664) (5664) (5664) (5612) (5612) (5612) (5612) (5612) (5612) (5664) (5664) (5768) (5768) (5768) (5820) (5820) (5924) (5924) (5976) (6028) (6028) (6028) (6028) (6028) (6080) (6080) (6080) (6080) (6704) (6704) (6132) (6132) (6132) (6288) (6704) (6340) (6340) (6392) (6444) (6496) (6548) (6652) (6704) (6704) (6548) (6600) (6704) (6756) (6704) (7380) (7380) (7380) (7380) (7380) (7380) (7380) (7380) (7380) (7380) (7380) (7380) (7380) (7380) (7380) (7432) (7484) (7536) (7588) (7588) (7588) (7588) (7640) (7692) (7692) (7692) (7692) (7692) (7692) (7692) (7640) (7588) (7588) (7536) (7484) (7380) (7380) (7224) (7224) (7172) (7172) (7120) (7120) (7120) (7120) (7068) (7016) (7016) (6964) (6912) (6860) (6808) (6444) (6340) (6340) (6288) (6236) (6236) (6132) (6080) (5976) (5976) (5976) (5976) (5924) (5924) (5820) (5820) (5820) (5820) (5820) (5820) (5976) (5976) (6080) (6080) (6132) (6132) (6184) (6184) (5872) (5872) (5872) (6132) (6080) (6080) (6080) (5664) (5976) (5664) (5976) (5664) (5976) (5976) (6028) (6028) (6028) (6028) (6080) (6080) (6080) (6080) (6080) (6080) (6080) (6080) (6080) (6132) (6132) (6132) (6132) (6132) (6080) (5820) (6080) (6080) (6028) (6028) (5976) (5924) (5924) (5924) (5924) (6652) (6600) (6600) (6600) (6548) (6548) (6548) (6548) (6548) (6548) (6548) (6548) (6548) (6548) (6496) (6496) (6548) (6548) (6548) (6600) (6652) (6704) (6704) (6808) (6860) (6912) (6912) (6964) (6964) (6964) (7068) (7068) (7068) (7068) (7120) (7120) (7380) (7120) (7120) (7796) (7536) (8732) (8732) (8732) (8732) (8732) (8732) (8732) (8732) (8732) (8732) (8732) (8732) (8732) (8524) (8524) (8472) (8472) (8472) (8472) (8472) (8472) (8420) (8420) (8420) (7952) (7952) (7952) (7900) (7900) (7900) (7900) (7900) (9200) (9096) (9044) (8992) (8992) (8992) (8940) (8888) (8836) (8836) (8836) (8732) (8836) (8836) (8836) (8836) (8836) (5144) (5092) (5092) (5040) (4988) (4988) (4936) (4936) (4936) (4936) (4884) (4884) (4884) (4884) (4832) (4780) (4780) (4780) (4728) (4728) (4728) (4728) (4728) (4728) (4624) (5352) (5352) (5352) (5352) (5352) (5352) (5352) (5352) (5404) (5404) (5404) (5404) (5404) (5508) (5404) (5820) (5664) (5664) (5664) (5820) (5664) (5248) (5248) (5300) (5300) (5300) (5352) (5664) (5300) (5300) (5300) (5300) (5300) (5352) (5300) (5248) (7120) (5248) (7536) (6860) (4000) (8160))) :lonset (quote (100 300 500 600 700 800 800 900 900 1000 1000 1100 1100 1200 1200 1200 1300 1400 1600 1700 1700 1900 2000 2000 2100 2300 2800 2800 3700 3700 3800 3900 3900 3900 4000 4100 4200 4500 4500 4600 4700 5000 5200 5400 5400 5400 5500 5600 5600 5700 5700 5700 5700 5900 6000 6000 6600 6700 6800 6800 6900 7000 7100 7100 7300 7400 7500 7600 7700 7800 8000 8000 8100 8200 8300 8500 9200 9300 9400 9400 9500 9500 9600 9600 9600 10500 10800 10900 11000 11100 11500 11800 12000 12100 12100 12300 12400 12400 12400 12400 12500 12600 12700 12900 12900 13000 13000 13100 13100 13200 13300 13300 13300 13300 13400 13400 13400 13400 13400 13500 13500 13500 13500 13500 13500 13500 13500 13500 12100 12200 12500 12700 13300 100 300 400 600 1100 1200 1400 1400 1500 1600 2000 2300 2500 2600 2600 2700 2800 2900 3000 3100 3200 3200 3300 3300 3400 3400 3500 3600 3600 3700 3900 3900 4000 4000 4100 4300 4300 4800 4800 4800 4900 4900 5000 5000 5100 5300 5600 5700 5800 5900 6000 6000 6400 6600 6600 6600 6700 6800 7200 7400 7600 7700 7700 7800 7800 7900 8000 8000 8000 8100 8200 8200 8500 8500 8500 8600 8600 8700 8700 8800 9200 9200 9200 9300 9500 9600 9700 10500 10500 10500 10600 10500 10800 10900 11000 11100 11100 11200 11200 11300 11300 11500 11700 11800 11800 12000 12100 12100 12200 12400 12400 12500 13100 1500 13100 13100 13300 13500 13700 13900 14100 14200 14300 1600 1800 1800 1900 2100 2300 2600 3700 4000 4500 5100 5700 6300 6700 7200 7400 7500 7600 7700 7900 8000 8300 8400 8700 8900 9100 9100 9300 9300 9400 9500 9600 9600 9700 9700 9900 9700 9900 9900 10400 14400 0 100 100 200 200 300 600 1400 4800 5900 6300 6500 6700 8100 9300 9700 10800 11300 11600 11800 12000 12400 12500 12700 8700 10000 10700 11900 12500 12600 12600 12700 1600 1700 1900 2300 2700 3000 3400 4500 5000 5300 6200 6700 6800 7100 7200 7200 7200 3400 3700 3900 4100 4400 4700 4900 5200 5500 5900 6300 6700 7200 7600 8400 9200 9400 9500 9600 9800 10000 10400 11100 11500 11800 5400 5700 5800 5900 6000 6100 6300 6300 6400 6600 4100 4200 4500 2700 4100 1500 1500 1500 1500 1500 1600 8300 8900 9300 9700 9800 10100 10500 10900 11000 11300 11400 11500 11600 12500 12800 9900 12800 7400 11500 4600 7000 15400)) :ldur (quotelvel (quoteloffset (quotelchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (4) (4) (4) (4) (4) (4) (4) (4) (4) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (6) (6) (6) (6) (6) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (7) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (8) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (9) (1) (1) (1) (1) (1) (1) (11) (11) (11) (11) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (12) (13) (13) (13) (13) (13) (13) (13) (13) (13) (13) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (14) (15) (15) (15) (16) (16) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (2) (2) (2) (2) (2) (2) (2) (2) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (3) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (4) (5) (5) (5) (5) (5) (5) (5) (5) (5) (5) (6) (6) (6) (7) (7) (8) (8) (8) (8) (8) (8) (9) (9) (9) (9) (9) (9) (1) (1) (1) (1) (1) (1) (1) (11) (11) (12) (12) (13) (13) (14) (14))) :legato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 12) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 17) nil nil (quote :midi-player) 33/20 nil 1000 0 (om-make-point 1492 523) (om-make-point 0 0) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 326 197) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 342 147) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxwithed1 (quote box-with-win) "chans" (quote omloop) (quote ((om-load-inputfun (quote input-funbox) "" "input0" nil))) (om-make-point 332 270) nil nil nil (list (let ((box (om-load-boxcall (quote genfun) "collect" (quote listing) (quote ((om-load-inputfun (quote input-funbox) "anything" "DATA" nil))) (om-make-point 94 619) nil nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 127 517) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 61 552) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 212 300) (om-make-point 26 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 114 251) (om-make-point 32 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "=" (quote =) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 123 291) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil) (om-load-inputfun (quote input-funbox) "ELSE" "ELSE" nil))) (om-make-point 155 359) (om-make-point 142 57) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 74 428) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 34 319) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 46 249) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 232 205) (om-make-point 32 30) 17 "17" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" nil))) (om-make-point 274 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 226 105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 174 117) (om-make-point 26 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "for" (quote forloop) (quote ((om-load-inputfun (quote input-funbox) "low value" "FROM" 0) (om-load-inputfun (quote input-funbox) "high value" "TO" 10))) (om-make-point 183 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "inlist" (quote listloop) (quote ((om-load-inputfun (quote input-funbox) "list to iterate" "LIST" nil))) (om-make-point 51 114) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input0" 0 (om-make-point 71 33) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "finally" (quote finaldo) (quote ((om-load-inputfun (quote input-funbox) "value to return" "VAL" nil))) (om-make-point 147 689) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "eachTime" (quote loopdo) (quote ((om-load-inputfun (quote input-funbox) "operations to do" "OP" nil))) (om-make-point 47 689) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box)) (quote ((2 0 0 0 nil 0) (7 0 1 0 nil 0) (15 0 2 0 nil 0) (1 0 2 1 nil 0) (4 0 5 0 nil 0) (11 0 5 1 nil 0) (5 0 6 0 nil 0) (3 0 6 1 nil 0) (11 0 6 2 nil 0) (6 0 7 0 nil 0) (8 0 7 1 nil 0) (9 0 8 0 nil 0) (15 0 9 0 nil 0) (14 0 11 0 nil 0) (10 0 11 1 nil 0) (16 0 12 0 nil 0) (13 0 14 0 nil 0) (12 0 14 1 nil 0) (16 0 15 0 nil 0) (0 1 17 0 nil 0) (0 0 18 0 nil 0))) 1 "chans" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MAT-TRANS 2" (quote mat-trans) (quote ((om-load-inputfun (quote input-funbox) "a list of lists" "MATRIX" nil))) (om-make-point 321 352) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (let ((box (om-load-boxcall (quote genfun) "LIST-ELEMENTS" (quote list-elements) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 312 430) nil nil nil nil 3))) (setf (numouts box) 3) box))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 311 499) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 342 501) (om-make-point 21 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 369 497) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 313 13) (om-make-point 38 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 435 10) (om-make-point 44 30) 9200 "9200" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 371 12) (om-make-point 44 30) 4000 "4000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "IMPORT-SVG" (quote import-svg) (quote nil) (om-make-point 98 21) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 0 0 nil 0) (15 0 1 0 nil 0) (1 0 2 0 nil 0) (12 0 2 1 nil 0) (14 0 2 2 nil 0) (13 0 2 3 nil 0) (10 0 3 1 nil 0) (0 0 3 2 nil 0) (11 0 3 6 nil 0) (5 0 4 0 nil 0) (2 0 5 0 nil 0) (2 1 5 1 nil 0) (4 0 6 0 nil 0) (6 0 7 0 nil 0) (7 0 8 0 nil 0) (8 0 9 0 nil 0) (8 1 10 0 nil 0) (8 2 11 0 nil 0))) nil 6.2))